from django.shortcuts import render, get_object_or_404
from django.utils import translation
from django.urls import reverse
from django.utils.translation import gettext_lazy as _

from rest_framework import status
from rest_framework_simplejwt.views import  TokenObtainPairView
from rest_framework import generics, status, views, viewsets
from rest_framework.response import Response
from rest_framework import permissions
from rest_framework.decorators import action
from rest_framework.pagination import PageNumberPagination
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from djoser.views import UserViewSet 
from django.db.models import Prefetch
from djoser import signals, utils, email
from djoser.compat import get_user_email
from djoser.serializers import  UserFunctionsMixin, PasswordResetConfirmSerializer


from content.email import PasswordResetEmail
from content.models import *
from content.serializers import *

ALL_LANGUAGE = []
try:
    ALL_LANGUAGE = [l[0] for l in settings.LANGUAGES]
except:
    pass

def set_model_language(request):
    """
        this method help to set user language before making any ORM query. This Help
        to use the field without language prefix (field with language prefix 
        e.g title_en are generated by modeltranslation) 
         as current language field. 
         if language param = fr then the  title field will be equal to title_fr
    """
    language = request.GET.get('language', request.LANGUAGE_CODE)
    if language in ALL_LANGUAGE:
        translation.activate(language) 
        
def response_with_paginator(viewset, queryset):
    page = viewset.paginate_queryset(queryset)
    if page is not None:
        serializer = viewset.get_serializer(page, many=True)
        return viewset.get_paginated_response(serializer.data)

    return Response(viewset.get_serializer(queryset, many=True).data)
    
class StandardPagination(PageNumberPagination):
    page_size = 5
    page_size_query_param = 'page_size'
    max_page_size = 1000 
  
class UserViewSet(UserViewSet):
    def get_queryset(self):
        queryset = super().get_queryset()
        return queryset.prefetch_related(Prefetch('user_alarm_settings',
                    queryset=UserAlarmSettings.objects.order_by('-modified')), Prefetch('user_credits',
                    queryset=Credit.objects.order_by('-modified')))
        
    def get_permissions(self):
        
        if self.action == "reset_password_code":
            self.permission_classes = [permissions.AllowAny]
        p = super().get_permissions()
        return p
    
    reset_password_text = "Use This API method to start the password reset process. "\
        "It sends the reset password code to the user by email. Then the API reset_password_code should be used "\
        "To get the code from the user. "
    @swagger_auto_schema(operation_description=reset_password_text, manual_parameters=[])
    @action(["post"], detail=False)
    def reset_password(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.get_user()

        if user:
            context = {"user": user}
            #rest_passwd = request.session.get('rest_passwd', False)
            #if not rest_passwd:
                #request.session['rest_passwd'] = {'user_id':user.id}
            #print('--->>>seesssion', request.session.get('rest_passwd', False))
            pwd_reset_obj = email.PasswordResetEmail(self.request, context)
            user_data = pwd_reset_obj.get_context_data()
            uid = user_data.get('uid', '')
            token = user_data.get('token', '')
            existing_code = PasswordResetCode.objects.filter(user=user, is_active=True)
            if existing_code.count()>0: #deactivate all existing PasswordResetCode
                existing_code.update(is_active=False)
            new_code = PasswordResetCode(user=user, uid=uid, token=token)
            new_code.save()
            context['code'] = new_code.code
            to = [get_user_email(user)]
            PasswordResetEmail(self.request, context).send(to)
            #url = reverse('password_reset_confirm', kwargs={'uid':user_data.get('uid', ''), 'token':user_data.get('token', '')})
            #print('user_data--->', user_data, url)
            return Response({'message':_('Code Sent to email')})
        return Response({'error':_('Email not found')}, status.HTTP_302_FOUND)
    
    
    request_body=openapi.Schema(type=openapi.TYPE_OBJECT, properties={'code': openapi.Schema(type=openapi.TYPE_STRING),
                                                                      'email': openapi.Schema(type=openapi.TYPE_STRING)})
    @swagger_auto_schema(operation_description="Help to reset password using code from email. Return the uid and token that should be used with the end point reset_password_confirm", request_body=request_body)
    @action(["post"], detail=False)
    def reset_password_code(self, request, *args, **kwargs):
        serializer = None
        self.permission_classes = [permissions.AllowAny]
        data=request.data
        email = data.get('email', '')
        code = data.get('code', '')
        msg = ''
        result = {}
        existing_code = PasswordResetCode.objects.filter(user__email=email, is_active=True).first()
        #current = existing_code.filter(user__email=email, code=code).first()
        max_attempt = attr_exist('BWL_PASSWORD_RESET_CODE_MAX_ATTEMPT') and \
                settings.BWL_PASSWORD_RESET_CODE_MAX_ATTEMPT or 3
        status_resp = status.HTTP_200_OK
        if not existing_code:
            msg = 'Code Not found for the provided email'
        else:
            existing_code.save()#increment number attempt: will is_active to false if number attempt is reached
            if existing_code.code==code:
                if not existing_code.is_active or existing_code.expiration_date<timezone.now():
                    msg = 'The code is expired'
                    status_resp = status.HTTP_302_FOUND
                else:
                    #url = reverse('password_reset_confirm', kwargs={'uid':existing_code.uid, 'token':existing_code.token})
                    result['uid']=existing_code.uid
                    result['token']=existing_code.token
                    existing_code.is_active = False
                    existing_code.save()
            else:
                msg = 'The code does not exist'
                status_resp = status.HTTP_302_FOUND
        if msg:
            result['error']=_(msg)
        return Response(result, status_resp)
    
    @action(["post"], detail=False)
    def reset_password_confirm(self, request, *args, **kwargs):
        result = super().reset_password_confirm(request, *args, **kwargs)
        return result
    #@action(["post"], detail=False, url_path="password/reset/confirm/(?P<uid>[\w-]+)/(?P<token>[\w-]+)".format(User.USERNAME_FIELD))
    #def reset_password_confirm(self, request, *args, **kwargs):
    #    pass

class LoginView(TokenObtainPairView):
    """
    Takes a set of user credentials and returns an access, refresh JSON web
    token pair, and user data to prove the authentication of those credentials.
    """
    serializer_class = LoginSerializer

class DiscorveryPagesViewSet(viewsets.ModelViewSet):
    """
    Return pages for the Application discovery 
    """
    permission_classes = [permissions.AllowAny]
    serializer_class = PageSerializer
    http_method_names = ['get']
    
    def get_permissions(self):
        if self.action in ['list']:
            self.permission_classes = [permissions.AllowAny,]
        return super().get_permissions()
    
    @swagger_auto_schema(auto_schema=None)
    def retrieve(self, request, pk=None):
        pass
    
    #@swagger_auto_schema(responses={200: PageSerializer(many=True)})
    def list(self, request):
        set_model_language(request)#set current language base on user language
        page = Page.objects.filter(type=Page.DISCOVER)
        serializer  = PageSerializer(page, many=True)
        return Response(serializer.data)
    
class UserAlarmSettingsAPIView(viewsets.ModelViewSet):
    """
    Return, create and update the Current user Alarm settings
    """
    serializer_class = UserAlarmSettingsSerializer
    permission_classes = [permissions.IsAuthenticated]
    queryset = None
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get', 'post', 'put', 'delete', 'head']
    
    def get_queryset(self):
        query =  UserAlarmSettings.objects.none()
        if self.request.user.is_authenticated:
            query = UserAlarmSettings.objects.filter(user=self.request.user)
        return query
    
class CurrencyAPIView(viewsets.ModelViewSet):
    """
    Return, the available currencies in the the system
    """
    serializer_class = CurrencySerializer
    permission_classes = [permissions.IsAuthenticated]
    queryset = Currency.objects.all()
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get']
    
class CountryAPIView(viewsets.ModelViewSet):
    """
    Return, the available Country in the the system
    """
    serializer_class = CountrySerializer
    permission_classes = [permissions.IsAuthenticated]
    queryset = Country.objects.all()
    http_method_names = ['get']
    
class UserCreditAPIView(viewsets.ModelViewSet):
    """
    Return, the User Credit
    """
    serializer_class = CreditSerializer
    permission_classes = [permissions.IsAuthenticated]
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get']
    
    def get_queryset(self):
        query =  Credit.objects.none()
        if self.request.user.is_authenticated:
            query = Credit.objects.filter(user=self.request.user)
        return query
    
class TransctionAPIView(viewsets.ModelViewSet):
    """
    Return, create and update the user Transaction
    """
    serializer_class = TransactionSerializer
    permission_classes = [permissions.IsAuthenticated]
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get', 'post', 'put']
    
    def get_queryset(self):
        query =  Transaction.objects.none()
        if self.request.user.is_authenticated:
            query = Transaction.objects.filter(user=self.request.user)
        return query
    
    
class PlaylistAPIView(viewsets.ModelViewSet):
    """
    Return, create and update the user Playlist
    """
    serializer_class = PlaylistSerializer
    permission_classes = [permissions.IsAuthenticated]
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get', 'post', 'put', 'delete']
    
    def get_queryset(self):
        query =  Playlist.objects.none()
        if self.request.user.is_authenticated:
            query = Playlist.objects.filter(user=self.request.user)
        return query
    
class OfferAPIView(viewsets.ModelViewSet):
    """
    Help to retrieve offer base currency
    """
    serializer_class = OfferBasicSerializer
    permission_classes = [permissions.AllowAny]
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get']
    
    queryset = None
    def get_queryset(self):
        return Offer.objects.include_current_price()

    #@swagger_auto_schema(operation_description='Help to retrieve offer for a particular currency', manual_parameters=[])
    #@action(["get"], detail=False, url_path="currency/(?P<currence_id>\d+)")
    #def offer_base_currency(self, request, *args, **kwargs):
        #set_model_language(request)#set current language base on user language
        #currency_id = kwargs.get('currence_id', '')
        #if not currency_id:
        #    return Response({'error':_('Currency id is required')}, status.HTTP_404_NOT_FOUND)
        #query = Offer.objects.include_current_price()
        #serializer = OfferSerializer(query, many=True)
        #return Response(serializer.data)
        
class UserMessagesAPIView(viewsets.ModelViewSet):
    serializer_class = MessageSerializer
    permission_classes = [permissions.IsAuthenticated]
    http_method_names = ['get']
    
    def get_queryset(self):
        request = self.request
        set_model_language(request)#set current language base on user language
        messages = Message.get_user_messages(request.user)
        return messages
    
    @swagger_auto_schema(auto_schema=None)
    def retrieve(self, request, pk=None):
        pass
    
    #@swagger_auto_schema(auto_schema=None)
    #def list(self, request):
        #set_model_language(request)#set current language base on user language
        #messages = Message.get_user_messages(request.user)
        
        #return Response(MessageSerializer(messages, many=True).data)
    
class UserMediaAPIView(viewsets.ModelViewSet):
    serializer_class = MediaSerializer
    permission_classes = [permissions.IsAuthenticated]
    http_method_names = ['get']
    queryset = None
    
    def get_queryset(self):
        request = self.request
        set_model_language(request)#set current language base on user language
        medias = Media.get_user_medias(request.user)
        return medias
    
    @swagger_auto_schema(auto_schema=None)
    def retrieve(self, request, pk=None):
        pass
    
    #def list(self, request):
        #set_model_language(request)#set current language base on user language
        #medias = Media.get_user_medias(request.user)
        
        #return Response(MediaSerializer(medias, many=True).data)
            
class SubscriptionAPIView(viewsets.ModelViewSet):
    """
    Help to get and create the user Subscription
    """
    serializer_class = SubscriptionBasicSerializer
    permission_classes = [permissions.IsAuthenticated]
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get']
    
    @swagger_auto_schema(auto_schema=None)
    def list(self, request):
        pass
    
    @swagger_auto_schema(auto_schema=None)
    def retrieve(self, request, pk=None):
        pass
    
    def get_queryset(self):
        query =  Playlist.objects.none()
        if self.request.user.is_authenticated:
            query = Subscription.objects.filter(user=self.request.user, is_active=True)
        return query
    
    request_body=openapi.Schema(type=openapi.TYPE_OBJECT, properties={'current': openapi.Schema(type=openapi.TYPE_STRING),
                                                                      'next': openapi.Schema(type=openapi.TYPE_STRING)})
    @swagger_auto_schema(responses={
        status.HTTP_200_OK: SubscriptionUserSerializer(many=False)})
    @action(["get"], detail=False)
    def get_user_subscription(self, request, *args, **kwargs):
        set_model_language(request)#set current language base on user language
        current_date_time = timezone.now()
        subscriptions = Subscription.get_user_subscription(request.user)
        data = {'current':{}, 'next':[]}
        if subscriptions.count()>0:
            current = {}
            if subscriptions[0].date_start<=current_date_time:
                current = SubscriptionSerializer(subscriptions[0], many=False).data
            next = SubscriptionBasicSerializer(subscriptions[1:], many=True).data
            data = {'current':current, 'next':next}
        
        return Response(data)
    
    @swagger_auto_schema(responses={
        status.HTTP_200_OK: MessageSerializer(many=False)})
    @action(["get"], detail=False)
    def get_user_today_message(self, request, *args, **kwargs):
        set_model_language(request)#set current language base on user language
        #current_date_time = timezone.now()
        #subscriptions = self.get_queryset().filter(date_start__lte=current_date_time, date_end__gte=current_date_time).order_by('date_end')
        #print('subscriptions-->>', subscriptions, current_date_time.date())
        #today_message = Message.objects.filter(message_offers__offer_subscription__in=subscriptions, 
        #                                       #published_date=current_date_time.date())
        today_message = Message.get_user_messages(request.user, today=True)
        today_message = today_message.count()>0 and MessageSerializer(today_message[0], many=False).data or {}
        
        return Response(today_message)
    
    
class ThemeSuggestionsAPIView(viewsets.ModelViewSet):
    """
    Help to create and retrieve Theme Suggestions
    """
    serializer_class = ThemeSuggestionsSerializer
    permission_classes = [permissions.IsAuthenticated]
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get', 'post', 'put']
    
    queryset = None
    def get_queryset(self):
        query = ThemeSuggestions.objects.filter(user=self.request.user)
        return query
    
class TransactionAPIView(viewsets.ModelViewSet):
    """
    Help to create and retrieve user's Transactions
    """
    serializer_class = TransactionSerializer
    permission_classes = [permissions.IsAuthenticated]
    #http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']
    http_method_names = ['get', 'post', 'put']
    pagination_class = StandardPagination
    
    queryset = None
    def get_queryset(self):
        print('self.request.user', self.request.user)
        query = Transaction.objects.filter(user=self.request.user)
        return query
    